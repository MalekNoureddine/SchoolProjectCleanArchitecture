// <auto-generated />
using System;
using CleanArchProject.Infrastracture.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchProject.Infrastracture.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241125221732_Add-Instructors")]
    partial class AddInstructors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchProject.Data.Entities.Department", b =>
                {
                    b.Property<int>("DID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DID"));

                    b.Property<string>("DName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("DNameAr")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("InsId")
                        .HasColumnType("int");

                    b.HasKey("DID");

                    b.HasIndex("InsId")
                        .IsUnique();

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.DepartmetSubject", b =>
                {
                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<int>("SubID")
                        .HasColumnType("int");

                    b.HasKey("DID", "SubID");

                    b.HasIndex("SubID");

                    b.ToTable("DepartmetSubject");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Dept_Instructor", b =>
                {
                    b.Property<int>("DepartmentDID")
                        .HasColumnType("int");

                    b.Property<int>("InstructorInsId")
                        .HasColumnType("int");

                    b.Property<int>("DID")
                        .HasColumnType("int");

                    b.Property<int>("InsId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentDID", "InstructorInsId");

                    b.HasIndex("InstructorInsId");

                    b.ToTable("Dept_Instructor");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Instructor", b =>
                {
                    b.Property<int>("InsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ENameAr")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("InsId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Instructors", (string)null);
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Student", b =>
                {
                    b.Property<int>("StudID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("DID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR");

                    b.HasKey("StudID");

                    b.HasIndex("DID");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.StudentSubject", b =>
                {
                    b.Property<int>("StudID")
                        .HasColumnType("int");

                    b.Property<int>("SubID")
                        .HasColumnType("int");

                    b.HasKey("StudID", "SubID");

                    b.HasIndex("SubID");

                    b.ToTable("StudentSubject");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Subj_Instructor", b =>
                {
                    b.Property<int>("InstructorInsId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectSubID")
                        .HasColumnType("int");

                    b.Property<int>("InsId")
                        .HasColumnType("int");

                    b.Property<int>("SubID")
                        .HasColumnType("int");

                    b.HasKey("InstructorInsId", "SubjectSubID");

                    b.HasIndex("SubjectSubID");

                    b.ToTable("Subj_Instructor");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Subjects", b =>
                {
                    b.Property<int>("SubID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubID"));

                    b.Property<DateTime>("Period")
                        .HasColumnType("Date");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("SubjectNameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("SubID");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Department", b =>
                {
                    b.HasOne("CleanArchProject.Data.Entities.Instructor", "Manager")
                        .WithOne("ManagedDepartment")
                        .HasForeignKey("CleanArchProject.Data.Entities.Department", "InsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.DepartmetSubject", b =>
                {
                    b.HasOne("CleanArchProject.Data.Entities.Department", "Department")
                        .WithMany("DepartmentSubjects")
                        .HasForeignKey("DID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchProject.Data.Entities.Subjects", "Subject")
                        .WithMany("DepartmetSubjects")
                        .HasForeignKey("SubID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Dept_Instructor", b =>
                {
                    b.HasOne("CleanArchProject.Data.Entities.Department", "Department")
                        .WithMany("Dept_Instructors")
                        .HasForeignKey("DepartmentDID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchProject.Data.Entities.Instructor", "Instructor")
                        .WithMany("Dept_Instructors")
                        .HasForeignKey("InstructorInsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Instructor", b =>
                {
                    b.HasOne("CleanArchProject.Data.Entities.Instructor", "Supervisor")
                        .WithMany("SupervisedInstructors")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Student", b =>
                {
                    b.HasOne("CleanArchProject.Data.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DID");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.StudentSubject", b =>
                {
                    b.HasOne("CleanArchProject.Data.Entities.Student", "Student")
                        .WithMany("Stud_Subjects")
                        .HasForeignKey("StudID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchProject.Data.Entities.Subjects", "Subject")
                        .WithMany("StudentsSubjects")
                        .HasForeignKey("SubID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Subj_Instructor", b =>
                {
                    b.HasOne("CleanArchProject.Data.Entities.Instructor", "Instructor")
                        .WithMany("Subj_Instructors")
                        .HasForeignKey("InstructorInsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchProject.Data.Entities.Subjects", "Subject")
                        .WithMany("Subj_Instructors")
                        .HasForeignKey("SubjectSubID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Department", b =>
                {
                    b.Navigation("DepartmentSubjects");

                    b.Navigation("Dept_Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Instructor", b =>
                {
                    b.Navigation("Dept_Instructors");

                    b.Navigation("ManagedDepartment");

                    b.Navigation("Subj_Instructors");

                    b.Navigation("SupervisedInstructors");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Student", b =>
                {
                    b.Navigation("Stud_Subjects");
                });

            modelBuilder.Entity("CleanArchProject.Data.Entities.Subjects", b =>
                {
                    b.Navigation("DepartmetSubjects");

                    b.Navigation("StudentsSubjects");

                    b.Navigation("Subj_Instructors");
                });
#pragma warning restore 612, 618
        }
    }
}
